# NOTE 1
# Additional root members should be removed from this schema and defined as optional
#

%YAML 1.2
---
  $id:                      '/'
  $async:                   true
  allOf:
  - anyOf:
    - required:
      - data
    - required:
      - errors
    - required:
      - meta
    errorMessage:           >-
      A document MUST contain
      at least one of the following top-level members
  - not:
      anyOf:
      - required:
        - errors
        - data
        errorMessage:       >-
          The members data and errors MUST NOT
          coexist in the same document
      - allOf:
        - not:
            required:
            - data
        - required:
          - included
        errorMessage:       >-
          If a document does not
          contain a top-level 'data' key,
          the 'included' member MUST NOT be present either
  - type:                   object
    properties:
      data:
        $ref:               /data
      errors:
        type:               array
        items:
          $ref:             /error
      meta:
        $ref:               /meta
      links:
        type:               array
        items:
          $ref:             /link
      included:
        $ref:               /included
      jsonapi:
        type:               object
    # see NOTE 1
    additionalProperties:   false
    errorMessage:
      type:                 >-
        A JSON object MUST be
        at the root of every JSON API
        request and response containing data
      # see NOTE 1
      additionalProperties: >-
        Unless otherwise noted, objects defined
        by this specification MUST NOT contain
        any additional members
---
  $id:                      /data
  oneOf:
  -	$ref:                   /resource
  -	$ref:                   /included
  - type:                   'null'
---
  $id:                      /errors
  type:                     array
  items:
    $ref:                   /error
---
  $id:                      /included
  type:                     array
  items:
    $ref:                   /resource
---
  $id:                      /resource
  type:                     object
  properties:
    id:
      type:                 string
    type:
      type:                 string
    meta:
      $ref:                 /meta
  oneOf:
  - properties:
      attributes:
        type:               object
      relationships:
        type:               array
        items:
          $ref:             /resource
      links:
        type:               array
        items:
          $ref:             /link
    allOf:
    - anyOf:
      - required:
        - id
      - required:
        - type
    - anyOf:
      - required:
        - attributes
      - required:
        - relationships
      - required:
        - links
      - required:
        - meta
  - required:
    - id
    - type
    additionalProperties:   false
---
  $id:                      /error
  type:                     object
---
  $id:                      /meta
  type:                     object
---
  $id:                      /link
  type:                     object
